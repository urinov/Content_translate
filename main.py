# -*- coding: utf-8 -*-
import os
import re
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CallbackQueryHandler, filters
from openai import OpenAI

# Load config
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

CHANNEL_BETRADER = -1002468278246
CHANNEL_BETRADER_UZ = -1002468278246
CHANNEL_FIRDAVS = -1002383272008

client = OpenAI(api_key=OPENAI_API_KEY)

# --- KALIT SO'ZLAR ---
trading_keywords_uz = [
    "aksiyalar", "fond bozori", "sarmoya", "foyda", "zarar", "risk", "kapital", "savdo",
    "pozitsiya", "savdo hajmi", "tahlil", "grafik", "narx", "tushish", "ko‚Äòtarilish", "bozor",
    "dividend", "broker", "savdolar", "buyurtma", "portfel", "moliyaviy erkinlik", "psixologiya",
    "order", "margin", "qimmatli qog‚Äòoz", "platforma", "indikator", "trend", "volatillik",
    "soxta signallar", "treyd", "scalping", "swing", "day trading", "long", "short", "buy", "sell", "balans",
    "S&P 500", "NASDAQ", "Dow Jones", "indeks", "ETF", "IPO", "diversifikatsiya",
    "blue chip", "kapitalizatsiya", "moliyaviy hisobot", "qimmatli qog‚Äòozlar bozori", 
    "likvidlik", "insayder", "volyum", "risk menejment", "algoritmik savdo", "fundamental tahlil", 
    "texnik tahlil", "daromadlilik", "EPS", "P/E", "dividend rentabelligi"
]

trading_keywords_ru = [
    "—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∞–∫—Ü–∏–∏", "—Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫", "–∏–Ω–≤–µ—Å—Ç–æ—Ä", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ø—Ä–∏–±—ã–ª—å", "—É–±—ã—Ç–æ–∫", "—Ä–∏—Å–∫",
    "–∫–∞–ø–∏—Ç–∞–ª", "–ø–æ–∑–∏—Ü–∏—è", "–æ–±—ä–µ–º", "–∞–Ω–∞–ª–∏–∑", "–≥—Ä–∞—Ñ–∏–∫", "—Ü–µ–Ω–∞", "—Ä–æ—Å—Ç", "–ø–∞–¥–µ–Ω–∏–µ", "—Ä—ã–Ω–æ–∫", "–¥–∏–≤–∏–¥–µ–Ω–¥—ã",
    "–±—Ä–æ–∫–µ—Ä", "—Ç–æ—Ä–≥–æ–≤–ª—è", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ø–æ—Ä—Ç—Ñ–µ–ª—å", "–∑–∞–∫–∞–∑", "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "—Å–¥–µ–ª–∫–∞", "–ª–æ—Å—Å", "–ø–ª–µ—á–æ",
    "–±–∞–ª–∞–Ω—Å", "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "—Å–∏–≥–Ω–∞–ª—ã", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", "—Ç—Ä–µ–Ω–¥", "–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "–ª–æ–Ω–≥",
    "—à–æ—Ä—Ç", "–±–∞–π", "—Å–µ–ª–ª", "—É—Ä–æ–≤–µ–Ω—å", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "S&P 500", "NASDAQ", "Dow Jones", "–∏–Ω–¥–µ–∫—Å", "ETF", "IPO", "–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
    "blue chip", "–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", "—Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫", 
    "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "–∏–Ω—Å–∞–π–¥–µ—Ä", "–æ–±—ä–µ–º", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", "–∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", 
    "—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "EPS", "P/E", "–¥–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
]

smm_keywords_uz = [
    "kontent", "vizual", "sarlavha", "post", "storilar", "story", "qamrov", "reaksiya",
    "komment", "like", "followers", "videokontent", "reels", "ijtimoiy tarmoqlar", "target",
    "reklama", "sotuv", "trafik", "qiziqish", "tahlil", "struktura", "brend", "obuna", "ko‚Äòrinish",
    "reach", "engagement", "konversiya", "aksiya", "tayming", "hook", "feedback", "auditoriya",
    "nisbat", "tasdiq", "mavzu", "so‚Äòrovnoma", "avtomatizatsiya", "yashirin savdo", "progrev", "savdo varonkasi"
]

smm_keywords_ru = [
    "–∫–æ–Ω—Ç–µ–Ω—Ç", "–≤–∏–∑—É–∞–ª", "–∑–∞–≥–æ–ª–æ–≤–æ–∫", "–ø–æ—Å—Ç", "—Å—Ç–æ—Ä–∏—Å", "–≤–∏–¥–µ–æ", "–æ—Ö–≤–∞—Ç", "—Ä–µ–∞–∫—Ü–∏—è", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
    "–ª–∞–π–∫", "–ø–æ–¥–ø–∏—Å—á–∏–∫–∏", "reels", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "—Ç–∞—Ä–≥–µ—Ç", "—Ä–µ–∫–ª–∞–º–∞", "–ø—Ä–æ–¥–∞–∂–∏", "—Ç—Ä–∞—Ñ–∏–∫",
    "–∏–Ω—Ç–µ—Ä–µ—Å", "–∞–Ω–∞–ª–∏–∑", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–±—Ä–µ–Ω–¥", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "–æ–±–ª–æ–∂–∫–∞", "–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è",
    "–∞–∫—Ü–∏—è", "—Ç–∞–π–º–∏–Ω–≥", "—Ö—É–∫", "–æ—Ç–∑—ã–≤—ã", "–∞—É–¥–∏—Ç–æ—Ä–∏—è", "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "–≤–∏–∑–∏—Ç–∫–∞", "–æ–ø—Ä–æ—Å", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
    "–ø—Ä–æ–≥—Ä–µ–≤", "–≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂", "–≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å", "–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
]

# Xabarlarni tillarga ko'ra sozlash
MESSAGES = {
    "uz": {
        "no_text": "‚ùå Bu xabarda matn yo‚Äòq.",
        "choose_channel": "Qaysi kanal uchun post tayyorlaymiz?",
        "choose_language": "Endi tilni tanlang:",
        "processing": "‚úÖ Tanlangan til: {lang}\n\n‚è≥ Matn qayta yozilmoqda...",
        "posted": "‚úÖ Post kanalga joylandi!",
        "post_error": "‚ùå Postni kanalga joylashda xatolik: {error}",
        "gpt_error": "‚ùå GPT xatosi: {error}",
        "too_long_error": "‚ö†Ô∏è Matn juda uzun, qisqartirib qayta yozilmoqda...",
        "betrader_button": "üìà BeTrader uchun",
        "betrader_uz_button": "üìà @Betrader_uz",
        "firdavs_button": "üìä FirdavsUrinov uchun",
        "uz_button": "üá∫üáø O'zbek tili",
        "ru_button": "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "confirm_button": "‚úÖ Kanalga joylash",
        "rewrite_button": "üîÑ Qayta yozish",
        "shorten_button": "‚úÇÔ∏è Qisqaroq yozish"
    },
    "ru": {
        "no_text": "‚ùå –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.",
        "choose_channel": "–î–ª—è –∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç?",
        "choose_language": "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "processing": "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {lang}\n\n‚è≥ –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è...",
        "posted": "‚úÖ –ü–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!",
        "post_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {error}",
        "gpt_error": "‚ùå –û—à–∏–±–∫–∞ GPT: {error}",
        "too_long_error": "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫z–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä–æ—á–µ...",
        "betrader_button": "üìà –î–ª—è BeTrader",
        "betrader_uz_button": "üìà @Betrader_uz",
        "firdavs_button": "üìä –î–ª—è FirdavsUrinov",
        "uz_button": "üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫",
        "ru_button": "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "confirm_button": "‚úÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –∫–∞–Ω–∞–ª",
        "rewrite_button": "üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å",
        "shorten_button": "‚úÇÔ∏è –°–æ–∫—Ä–∞—Ç–∏—Ç—å"
    }
}

# HTML teglarini tekshirish va tuzatish funksiyasi
def fix_html_tags(text):
    open_b_count = text.count("<b>")
    close_b_count = text.count("</b>")
    open_i_count = text.count("<i>")
    close_i_count = text.count("</i>")

    if open_b_count > close_b_count:
        text += "</b>" * (open_b_count - close_b_count)
    elif close_b_count > open_b_count:
        text = text.replace("</b>", "", close_b_count - open_b_count)

    if open_i_count > close_i_count:
        text += "</i>" * (open_i_count - close_i_count)
    elif close_i_count > open_i_count:
        text = text.replace("</i>", "", close_i_count - open_i_count)

    return text

# Matnni qisqartirish (teglarni buzmaslik uchun)
def truncate_text(text, limit=1000):
    if len(text) <= limit:
        return text

    truncated = text[:limit]
    open_b_count = truncated.count("<b>") - truncated.count("</b>")
    open_i_count = truncated.count("<i>") - truncated.count("</i>")

    if open_b_count > 0:
        truncated += "</b>" * open_b_count
    if open_i_count > 0:
        truncated += "</i>" * open_i_count

    if not truncated.endswith("..."):
        truncated += "..."

    return truncated

# Telegram qo‚Äòllab-quvvatlamaydigan HTML teglarni olib tashlash yoki almashtirish
def clean_unsupported_html(text):
    # <h1>, <h2>, <h3> kabi sarlavha teglarni <b> ga almashtirish
    text = re.sub(r"<h[1-6]>", "<b>", text)
    text = re.sub(r"</h[1-6]>", "</b>", text)

    # <p> teglarini oddiy qatorlar bilan almashtirish (bo‚Äòsh qator qo‚Äòshish)
    text = re.sub(r"<p>", "", text)
    text = re.sub(r"</p>", "\n\n", text)

    # <ul> va <li> teglarini oddiy ro‚Äòyxat sifatida ko‚Äòrsatish
    text = re.sub(r"<ul>", "", text)
    text = re.sub(r"</ul>", "", text)
    text = re.sub(r"<li>", "‚Ä¢ ", text)
    text = re.sub(r"</li>", "\n", text)

    # Boshqa qo‚Äòllab-quvvatlanmaydigan teglarni olib tashlash
    text = re.sub(r"<[^>]+>", "", text, flags=re.MULTILINE)

    # Ortiqcha bo‚Äòsh qatorlarni tozalash
    text = re.sub(r"\n\n+", "\n\n", text)
    return text.strip()

# Matndan keraksiz gaplarni, linklarni va reklama iboralarini olib tashlash
def clean_post(text):
    text = re.sub(r"Forwarded from.*$", "", text, flags=re.MULTILINE)
    text = re.sub(r"@[A-Za-z0-9_]+", "", text)
    text = re.sub(r"https?://t\.me/\S+", "", text)
    text = re.sub(r"–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å.*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å.*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\s*–Ω–∞\s*.*?\s*–¥–ª—è\s*–ø–æ–ª—É—á–µ–Ω–∏—è\s*–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π\s*–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\.?\s*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"\bFTT\b", "", text, flags=re.IGNORECASE)
    text = re.sub(r"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?.*", "", text)
    text = re.sub(r"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.*", "", text)
    text = re.sub(r"https?://\S+", "", text)
    text = re.sub(r"(bit\.ly|linktr\.ee|taplink|exode|tgstation)\S*", "", text)
    text = re.sub(r"Hook:.*?\n", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"Pravilno oformlenyye punkty, kotoryye doslovno povtoryayutsya i\.\.\..*", "", text, flags=re.MULTILINE | re.IGNORECASE)

    # Matnni jumlalarga bo'lish va har 2-3 jumlada bo'sh qator qo'shish
    sentences = re.split(r'(?<=[.!?])\s+', text.strip())
    formatted_text = ""
    for i, sentence in enumerate(sentences):
        formatted_text += sentence.strip()
        if i < len(sentences) - 1:
            formatted_text += " "
            if (i + 1) % 3 == 0:
                formatted_text += "\n\n"

    formatted_text = re.sub(r"\n\n+", "\n\n", formatted_text)
    seen = set()
    result = []
    for line in formatted_text.split("\n"):
        if line.strip() and line not in seen:
            result.append(line)
            seen.add(line)
    return "\n".join(result).strip()

# Kiruvchi matnni gaplarga ajratish
def split_sentences(text):
    sentences = re.split(r'\.\s*', text.strip())
    return [s.strip() for s in sentences if s.strip()]

# Matnni faqat bitta hook bilan qayta yozish
def create_hook(text):
    lines = text.split("\n")
    if lines:
        hook = lines[0].strip()
        remaining_text = "\n".join(lines[1:]).strip()
        remaining_text = remaining_text.replace(hook, "", 1).strip()
        return hook, remaining_text
    return text, ""

# Prompt yaratish funksiyasi
def create_prompt(original_text, target, lang, shorten=False):
    formatted_text = "\n".join(split_sentences(original_text))
    # Tilni aniq ko‚Äòrsatish va sifatli qayta yozish uchun qo‚Äòshimcha ko‚Äòrsatma
    lang_instruction = (
        "Javobni faqat o‚Äòzbek tilida yoz, boshqa tillardan foydalanma. Agar kiruvchi matn boshqa tilda bo‚Äòlsa, uni o‚Äòzbek tiliga tarjima qil va qayta yoz. "
        "Matnni tabiiy, o‚Äòqilishi oson va professional SMM postiga mos qilib qayta yoz. So‚Äòzlarni mexanik tarzda tarjima qilishdan saqlan, o‚Äòzbek tilida tabiiy va ravon bo‚Äòlishiga e‚Äôtibor ber."
    ) if lang == "uz" else (
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏. –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –ø–µ—Ä–µ–ø–∏—à–∏. "
        "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –æ–Ω —á–∏—Ç–∞–ª—Å—è –ª–µ–≥–∫–æ –∏ –≤—ã–≥–ª—è–¥–µ–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è SMM-–ø–æ—Å—Ç–∞."
    )

    if lang == "ru":
        if target in ["betrader", "betrader_uz"]:
            if shorten:
                return f"""
                –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –°–®–ê, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å–æ —Å—Ç–∞–∂–µ–º. –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –∏—Ö. –ï—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö.

                –ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –Ω–∞ 30-50% –∫–æ—Ä–æ—á–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª:
                ---
                {formatted_text}
                ---
                {lang_instruction}
                –°–¥–µ–ª–∞–π –µ–≥–æ —è—Ä–∫–∏–º, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º. –ù–∞—á–Ω–∏ —Å —Ö—É–∫–∞ (–≤—ã–¥–µ–ª–∏ –µ–≥–æ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é ** –∏ –∑–∞–∫—Ä–æ–π **). –ò—Å–ø–æ–ª—å–∑—É–π –∫—É—Ä—Å–∏–≤ (_ –∏ –∑–∞–∫—Ä–æ–π _) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ—è—Ö. –í–∞–∂–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ñ–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ü–µ–Ω—Ç—ã) –≤—ã–¥–µ–ª—è–π –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (** –∏ –∑–∞–∫—Ä–æ–π **). –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã: –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–µ–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–ª—Å—è. –£–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, —Å–æ–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ç–≥ –∫–∞–Ω–∞–ª–æ–≤. –£–¥–∞–ª–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ... –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏". –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∞–±–∑–∞—Ü–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, _ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞).
                """
            return f"""
            –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –°–®–ê, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å–æ —Å—Ç–∞–∂–µ–º. –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –∏—Ö. –ï—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö.

            –ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:
            ---
            {formatted_text}
            ---
            {lang_instruction}
            –°–¥–µ–ª–∞–π –µ–≥–æ —è—Ä–∫–∏–º, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º. –ù–∞—á–Ω–∏ —Å —Ö—É–∫–∞ (–≤—ã–¥–µ–ª–∏ –µ–≥–æ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é ** –∏ –∑–∞–∫—Ä–æ–π **). –ò—Å–ø–æ–ª—å–∑—É–π –∫—É—Ä—Å–∏–≤ (_ –∏ –∑–∞–∫—Ä–æ–π _) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ—è—Ö. –í–∞–∂–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ñ–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ü–µ–Ω—Ç—ã) –≤—ã–¥–µ–ª—è–π –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (** –∏ –∑–∞–∫—Ä–æ–π **). –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã: –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–µ–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–ª—Å—è. –£–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, —Å–æ–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ç–≥ –∫–∞–Ω–∞–ª–æ–≤. –£–¥–∞–ª–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ... –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏". –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∞–±–∑–∞—Ü–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, _ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞).
            """
        elif target == "firdavs":
            if shorten:
                return f"""
                –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π SMM –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –∏—Ö. –ï—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö.

                –ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –Ω–∞ 30-50% –∫–æ—Ä–æ—á–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª:
                ---
                {formatted_text}
                ---
                {lang_instruction}
                –°–¥–µ–ª–∞–π –µ–≥–æ —è—Ä–∫–∏–º, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º. –ù–∞—á–Ω–∏ —Å —Ö—É–∫–∞ (–≤—ã–¥–µ–ª–∏ –µ–≥–æ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é ** –∏ –∑–∞–∫—Ä–æ–π **). –ò—Å–ø–æ–ª—å–∑—É–π –∫—É—Ä—Å–∏–≤ (_ –∏ –∑–∞–∫—Ä–æ–π _) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ—è—Ö. –í–∞–∂–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ñ–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ü–µ–Ω—Ç—ã) –≤—ã–¥–µ–ª—è–π –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (** –∏ –∑–∞–∫—Ä–æ–π **). –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã: –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–µ–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–ª—Å—è. –£–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, —Å–æ–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ç–≥ –∫–∞–Ω–∞–ª–æ–≤. –£–¥–∞–ª–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ... –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏". –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∞–±–∑–∞—Ü–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, _ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞).
                """
            return f"""
            –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π SMM –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –∏—Ö. –ï—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö.

            –ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:
            ---
            {formatted_text}
            ---
            {lang_instruction}
            –°–¥–µ–ª–∞–π –µ–≥–æ —è—Ä–∫–∏–º, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º. –ù–∞—á–Ω–∏ —Å —Ö—É–∫–∞ (–≤—ã–¥–µ–ª–∏ –µ–≥–æ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é ** –∏ –∑–∞–∫—Ä–æ–π **). –ò—Å–ø–æ–ª—å–∑—É–π –∫—É—Ä—Å–∏–≤ (_ –∏ –∑–∞–∫—Ä–æ–π _) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ—è—Ö. –í–∞–∂–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ñ–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ü–µ–Ω—Ç—ã) –≤—ã–¥–µ–ª—è–π –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (** –∏ –∑–∞–∫—Ä–æ–π **). –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã: –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–µ–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–ª—Å—è. –£–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, —Å–æ–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ç–≥ –∫–∞–Ω–∞–ª–æ–≤. –£–¥–∞–ª–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ... –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏". –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∞–±–∑–∞—Ü–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (** –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, _ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞).
            """
    else:  # uz
        if target in ["betrader", "betrader_uz"]:
            if shorten:
                return f"""
                Sen ‚Äî professional treyder, fond bozori bo‚Äòyicha analitik va kreativ kopiraytersan. Matnni imlo, grammatika va stilistik xatolar uchun tekshir va tuzat. Agar matn ichida iqtiboslar bo‚Äòlsa, ularni albatta ishlat.

                Quyidagi postni o‚Äòzbek tilida 30-50% qisqartirib, lekin asosiy mazmunini saqlab qayta yoz:
                ---
                {formatted_text}
                ---
                {lang_instruction}
                Matnni SMM postiga mos qilib, qiziqarli va o‚Äòqilishi oson qil. Hook bilan boshla (uni ** bilan qalin shrift bilan yoz va ** bilan yop). Asosiy fikrlarni ta‚Äôkidlash uchun kursiv (_ bilan boshla va _ bilan yop) ishlat. Muhim raqamlar yoki faktlarni (masalan, foizlarni) qalin shrift bilan (** bilan boshla va ** bilan yop) ajratib ko‚Äòrsat. Matnni mantiqiy abzatslarga bo‚Äòl: har 2-3 jumlada bo‚Äòsh qator qoldirib, matn tuzilgan va o‚Äòqish uchun qulay ko‚Äòrinsin. Ortiqcha linklar, maslahatlar va boshqa tg kanallar haqidagi ma‚Äôlumotlarni olib tashla. "Obuna bo‚Äòling ... qo‚Äòshimcha ma‚Äôlumot olish uchun" kabi iboralarni olib tashla. Oxirida CTA qo‚Äòsh, u alohida abzatsda bo‚Äòlsin. HTML teglarni ishlatma, faqat Markdown formatidan foydalan (** qalin shrift uchun, _ kursiv uchun).
                """
            return f"""
            Sen ‚Äî professional treyder, fond bozori bo‚Äòyicha analitik va kreativ kopiraytersan. Matnni imlo, grammatika va stilistik xatolar uchun tekshir va tuzat. Agar matn ichida iqtiboslar bo‚Äòlsa, ularni albatta ishlat.

            Quyidagi postni o‚Äòzbek tilida qayta yoz:
            ---
            {formatted_text}
            ---
            {lang_instruction}
            Matnni SMM postiga mos qilib, qiziqarli va o‚Äòqilishi oson qil. Hook bilan boshla (uni ** bilan qalin shrift bilan yoz va ** bilan yop). Asosiy fikrlarni ta‚Äôkidlash uchun kursiv (_ bilan boshla va _ bilan yop) ishlat. Muhim raqamlar yoki faktlarni (masalan, foizlarni) qalin shrift bilan (** bilan boshla va ** bilan yop) ajratib ko‚Äòrsat. Matnni mantiqiy abzatslarga bo‚Äòl: har 2-3 jumlada bo‚Äòsh qator qoldirib, matn tuzilgan va o‚Äòqish uchun qulay ko‚Äòrinsin. Matnni juda uzun qilma. Ortiqcha linklar, maslahatlar va boshqa tg kanallar haqidagi ma‚Äôlumotlarni olib tashla. "Obuna bo‚Äòling ... qo‚Äòshimcha ma‚Äôlumot olish uchun" kabi iboralarni olib tashla. Oxirida CTA qo‚Äòsh, u alohida abzatsda bo‚Äòlsin. HTML teglarni ishlatma, faqat Markdown formatidan foydalan (** qalin shrift uchun, _ kursiv uchun).
            """
        elif target == "firdavs":
            if shorten:
                return f"""
                Sen ‚Äî professional SMM menejersan va kreativ kopiraytersan. Matnni imlo, grammatika va stilistik xatolar uchun tekshir va tuzat. Agar matn ichida iqtiboslar bo‚Äòlsa, ularni albatta ishlat.

                Quyidagi postni o‚Äòzbek tilida 30-50% qisqartirib, lekin asosiy mazmunini saqlab qayta yoz:
                ---
                {formatted_text}
                ---
                {lang_instruction}
                Matnni SMM postiga mos qilib, qiziqarli va o‚Äòqilishi oson qil. Hook bilan boshla (uni ** bilan qalin shrift bilan yoz va ** bilan yop). Asosiy fikrlarni ta‚Äôkidlash uchun kursiv (_ bilan boshla va _ bilan yop) ishlat. Muhim raqamlar yoki faktlarni (masalan, foizlarni) qalin shrift bilan (** bilan boshla va ** bilan yop) ajratib ko‚Äòrsat. Matnni mantiqiy abzatslarga bo‚Äòl: har 2-3 jumlada bo‚Äòsh qator qoldirib, matn tuzilgan va o‚Äòqish uchun qulay ko‚Äòrinsin. Ortiqcha linklar, maslahatlar va boshqa tg kanallar haqidagi ma‚Äôlumotlarni olib tashla. "Obuna bo‚Äòling ... qo‚Äòshimcha ma‚Äôlumot olish uchun" kabi iboralarni olib tashla. Oxirida CTA qo‚Äòsh, u alohida abzatsda bo‚Äòlsin. HTML teglarni ishlatma, faqat Markdown formatidan foydalan (** qalin shrift uchun, _ kursiv uchun).
                """
            return f"""
            Sen ‚Äî professional SMM menejersan va kreativ kopiraytersan. Matnni imlo, grammatika va stilistik xatolar uchun tekshir va tuzat. Agar matn ichida iqtiboslar bo‚Äòlsa, ularni albatta ishlat.

            Quyidagi postni o‚Äòzbek tilida qayta yoz:
            ---
            {formatted_text}
            ---
            {lang_instruction}
            Matnni SMM postiga mos qilib, qiziqarli va o‚Äòqilishi oson qil. Hook bilan boshla (uni ** bilan qalin shrift bilan yoz va ** bilan yop). Asosiy fikrlarni ta‚Äôkidlash uchun kursiv (_ bilan boshla va _ bilan yop) ishlat. Muhim raqamlar yoki faktlarni (masalan, foizlarni) qalin shrift bilan (** bilan boshla va ** bilan yop) ajratib ko‚Äòrsat. Matnni mantiqiy abzatslarga bo‚Äòl: har 2-3 jumlada bo‚Äòsh qator qoldirib, matn tuzilgan va o‚Äòqish uchun qulay ko‚Äòrinsin. Matnni juda uzun qilma. Ortiqcha linklar, maslahatlar va boshqa tg kanallar haqidagi ma‚Äôlumotlarni olib tashla. "Obuna bo‚Äòling ... qo‚Äòshimcha ma‚Äôlumot olish uchun" kabi iboralarni olib tashla. Oxirida CTA qo‚Äòsh, u alohida abzatsda bo‚Äòlsin. HTML teglarni ishlatma, faqat Markdown formatidan foydalan (** qalin shrift uchun, _ kursiv uchun).
            """

    # Spoiler uchun || markasi ishlatiladi
    text = text.replace("||", "")  # ||spoiler||'larni tekshirib o'zgartirish
    
    return text.strip()
        
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg.text and not msg.caption and not msg.media_group_id:
        lang = context.user_data.get("lang", "uz")
        await msg.reply_text(MESSAGES[lang]["no_text"])
        return

    # Media groupni aniqlash
    media_group_id = msg.media_group_id
    if media_group_id:
        # Agar media group mavjud bo'lsa, bularni to'plam sifatida saqlaymiz
        if "media_group" not in context.user_data:
            context.user_data["media_group"] = []
        context.user_data["media_group"].append({
            "photo": msg.photo[-1].file_id if msg.photo else None,
            "video": msg.video.file_id if msg.video else None,
            "caption": msg.caption
        })

        # Agar bu media groupdagi birinchi xabar bo'lsa, kanalni tanlashni so'raymiz
        if len(context.user_data["media_group"]) == 1:
            lang = context.user_data.get("lang", "uz")
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(MESSAGES[lang]["betrader_uz_button"], callback_data="target_betrader_uz")],
                [InlineKeyboardButton(MESSAGES[lang]["firdavs_button"], callback_data="target_firdavs")]
            ])
            await msg.reply_text(MESSAGES[lang]["choose_channel"], reply_markup=keyboard)

        context.user_data["original_text"] = msg.caption or context.user_data.get("original_text", "")
        return
    else:
        # Agar bu oddiy rasm yoki video bo'lsa, uni saqlaymiz
        context.user_data["media_group"] = None
        context.user_data["photo"] = msg.photo[-1].file_id if msg.photo else None
        context.user_data["video"] = msg.video.file_id if msg.video else None

    lang = context.user_data.get("lang", "uz")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(MESSAGES[lang]["betrader_uz_button"], callback_data="target_betrader_uz")],
        [InlineKeyboardButton(MESSAGES[lang]["firdavs_button"], callback_data="target_firdavs")]
    ])

    await msg.reply_text(MESSAGES[lang]["choose_channel"], reply_markup=keyboard)
    context.user_data["original_text"] = msg.text or msg.caption or ""

# Postni tasdiqlash yoki yuborish
async def handle_confirm_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    target = context.user_data.get("target")
    lang = context.user_data.get("lang", "uz")
    media_group = context.user_data.get("media_group")
    photo = context.user_data.get("photo")
    video = context.user_data.get("video")
    final_text = context.user_data.get("final_text")

    if target == "betrader":
        channel_id = CHANNEL_BETRADER
    elif target == "betrader_uz":
        channel_id = CHANNEL_BETRADER_UZ
    else:
        channel_id = CHANNEL_FIRDAVS

    try:
        if media_group:
            media = []
            for item in media_group:
                if item["photo"]:
                    media.append(InputMediaPhoto(media=item["photo"], caption=final_text if not media else "", parse_mode="HTML"))
                elif item["video"]:
                    media.append(InputMediaVideo(media=item["video"], caption=final_text if not media else "", parse_mode="HTML"))
            await context.bot.send_media_group(chat_id=channel_id, media=media)
        elif photo:
            await context.bot.send_photo(chat_id=channel_id, photo=photo, caption=final_text, parse_mode="HTML")
        elif video:
            await context.bot.send_video(chat_id=channel_id, video=video, caption=final_text, parse_mode="HTML")
        else:
            await context.bot.send_message(chat_id=channel_id, text=final_text, parse_mode="HTML")

        await query.message.reply_text(MESSAGES[lang]["posted"])
    except Exception as e:
        await query.message.reply_text(MESSAGES[lang]["post_error"].format(error=e))

async def handle_target_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    target = query.data.replace("target_", "")
    context.user_data["target"] = target

    lang = context.user_data.get("lang", "uz")
    print(f"handle_target_choice: lang={lang}")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(MESSAGES[lang]["uz_button"], callback_data="lang_uz")],
        [InlineKeyboardButton(MESSAGES[lang]["ru_button"], callback_data="lang_ru")]
    ])
    await query.message.reply_text(MESSAGES[lang]["choose_language"], reply_markup=keyboard)

async def handle_language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data.replace("lang_", "")
    context.user_data["lang"] = lang
    print(f"handle_language_choice: lang={lang}")
    await process_text(update, context)

# -*- coding: utf-8 -*-
import os
import re
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CallbackQueryHandler, filters
from openai import OpenAI

# Load config
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

CHANNEL_BETRADER = -1002431616018
CHANNEL_BETRADER_UZ = -1002468278246
CHANNEL_FIRDAVS = -1002383272008

client = OpenAI(api_key=OPENAI_API_KEY)

# Xabarlarni tillarga ko'ra sozlash
MESSAGES = {
    "uz": {
        "no_text": "‚ùå Bu xabarda matn yo‚Äòq.",
        "choose_channel": "Qaysi kanal uchun post tayyorlaymiz?",
        "choose_language": "Endi tilni tanlang:",
        "processing": "‚úÖ Tanlangan til: {lang}\n\n‚è≥ Matn qayta yozilmoqda...",
        "posted": "‚úÖ Post kanalga joylandi!",
        "post_error": "‚ùå Postni kanalga joylashda xatolik: {error}",
        "gpt_error": "‚ùå GPT xatosi: {error}",
        "too_long_error": "‚ö†Ô∏è Matn juda uzun, qisqartirib qayta yozilmoqda...",
        "betrader_button": "üìà BeTrader uchun",
        "betrader_uz_button": "üìà @Betrader_uz",
        "firdavs_button": "üìä FirdavsUrinov uchun",
        "uz_button": "üá∫üáø O'zbek tili",
        "ru_button": "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "confirm_button": "‚úÖ Kanalga joylash",
        "rewrite_button": "üîÑ Qayta yozish",
        "shorten_button": "‚úÇÔ∏è Qisqaroq yozish"
    },
    "ru": {
        "no_text": "‚ùå –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.",
        "choose_channel": "–î–ª—è –∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç?",
        "choose_language": "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "processing": "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {lang}\n\n‚è≥ –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è...",
        "posted": "‚úÖ –ü–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!",
        "post_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {error}",
        "gpt_error": "‚ùå –û—à–∏–±–∫–∞ GPT: {error}",
        "too_long_error": "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫z–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä–æ—á–µ...",
        "betrader_button": "üìà –î–ª—è BeTrader",
        "betrader_uz_button": "üìà @Betrader_uz",
        "firdavs_button": "üìä –î–ª—è FirdavsUrinov",
        "uz_button": "üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫",
        "ru_button": "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        "confirm_button": "‚úÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –∫–∞–Ω–∞–ª",
        "rewrite_button": "üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å",
        "shorten_button": "‚úÇÔ∏è –°–æ–∫—Ä–∞—Ç–∏—Ç—å"
    }
}

# Matndan keraksiz gaplarni, linklarni va reklama iboralarini olib tashlash
def clean_post(text):
    text = re.sub(r"Forwarded from.*$", "", text, flags=re.MULTILINE)
    text = re.sub(r"@[A-Za-z0-9_]+", "", text)
    text = re.sub(r"https?://t\.me/\S+", "", text)
    text = re.sub(r"–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å.*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å.*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\s*–Ω–∞\s*.*?\s*–¥–ª—è\s*–ø–æ–ª—É—á–µ–Ω–∏—è\s*–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π\s*–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\.?\s*$", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"\bFTT\b", "", text, flags=re.IGNORECASE)
    text = re.sub(r"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?.*", "", text)
    text = re.sub(r"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.*", "", text)
    text = re.sub(r"https?://\S+", "", text)
    text = re.sub(r"(bit\.ly|linktr\.ee|taplink|exode|tgstation)\S*", "", text)
    text = re.sub(r"Hook:.*?\n", "", text, flags=re.MULTILINE | re.IGNORECASE)
    text = re.sub(r"Pravilno oformlenyye punkty, kotoryye doslovno povtoryayutsya i\.\.\..*", "", text, flags=re.MULTILINE | re.IGNORECASE)

    # Matnni jumlalarga bo'lish va har 2-3 jumlada bo'sh qator qo'shish
    sentences = re.split(r'(?<=[.!?])\s+', text.strip())
    formatted_text = ""
    for i, sentence in enumerate(sentences):
        formatted_text += sentence.strip()
        if i < len(sentences) - 1:
            formatted_text += " "
            if (i + 1) % 3 == 0:
                formatted_text += "\n\n"

    formatted_text = re.sub(r"\n\n+", "\n\n", formatted_text)
    seen = set()
    result = []
    for line in formatted_text.split("\n"):
        if line.strip() and line not in seen:
            result.append(line)
            seen.add(line)
    return "\n".join(result).strip()

# Matnni faqat bitta hook bilan qayta yozish
def create_hook(text):
    lines = text.split("\n")
    if lines:
        hook = lines[0].strip()
        remaining_text = "\n".join(lines[1:]).strip()
        remaining_text = remaining_text.replace(hook, "", 1).strip()
        return hook, remaining_text
    return text, ""

# Matnni Markdown V1 formatida tozalash
def clean_markdown(text):
    text = text.replace("**", "")  # qalin shriftlar alohida qo‚Äòshilyapti
    # * * va _ _ ikkalasini ham italik sifatida aniqlash
    text = re.sub(r"\*(.*?)\*|_(.*?)_", r"<i>\1\2</i>", text)  # italikni HTMLga o‚Äòzgartirish
    text = text.replace("`", "``")
    text = text.replace("||", "")
    return text.strip()

# --- YORDAMCHI FUNKSIYALAR ---
def get_keywords(lang, target):
    if lang == "uz":
        return trading_keywords_uz if target in ["betrader", "betrader_uz"] else smm_keywords_uz
    else:
        return trading_keywords_ru if target in ["betrader", "betrader_uz"] else smm_keywords_ru

def emphasize_keywords(text, keywords):
    for kw in sorted(keywords, key=lambda k: -len(k)):
        pattern = re.compile(rf'(?<!<b>)\b({re.escape(kw)})\b(?!</b>)', re.IGNORECASE)
        text = pattern.sub(r'<b>\1</b>', text)
    return text

def add_line_breaks_every_2_sentences(text):
    sentences = re.split(r'(?<=[.!?])\s+', text.strip())
    new_text = ""
    for i, s in enumerate(sentences):
        new_text += s.strip() + " "
        if (i + 1) % 2 == 0:
            new_text += "\n\n"
    return new_text.strip()

def format_hook(text):
    lines = text.strip().split("\n")
    if lines:
        hook = lines[0].strip()
        body = "\n".join(lines[1:]).strip()
        return f"<b>{hook}</b>\n\n{body}"
    return text

# --- ASOSIY QAYTA ISHLASH FUNKSIYASI (GPT javobi ustida ishlatiladi) ---
def full_formatting_pipeline(gpt_text, lang, target):
    keywords = get_keywords(lang, target)
    text = gpt_text.strip()
    text = emphasize_keywords(text, keywords)
    text = add_line_breaks_every_2_sentences(text)
    text = format_hook(text)
    return text.strip()

# Kiruvchi matnni qayta ishlash
async def process_text(update: Update, context: ContextTypes.DEFAULT_TYPE, shorten=False):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "uz")
    print(f"process_text: lang={lang}")
    original_text = context.user_data.get("original_text")
    target = context.user_data.get("target")
    media_group = context.user_data.get("media_group")
    photo = context.user_data.get("photo")
    video = context.user_data.get("video")

    await query.message.reply_text(MESSAGES[lang]["processing"].format(lang=lang.upper()))

    try:
        prompt = create_prompt(original_text, target, lang, shorten=shorten)
        print(f"Prompt: {prompt}")
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        new_text = response.choices[0].message.content.strip()
        print(f"GPT response: {new_text}")

        if new_text.strip() == original_text.strip():
            raise Exception("GPT matnni qayta yozmadi, iltimos qayta urinib ko‚Äòring.")

        # Matnni tozalash
        # To‚Äòliq formatlash pipeline
        clean_text = full_formatting_pipeline(new_text, lang, target)

        # Birinchi qatorni aniqlash va Markdown formatida qalin qilish
        lines = clean_text.split("\n")
        if lines:
            first_line = lines[0].strip()
            remaining_lines = "\n".join(lines[1:]).strip() if len(lines) > 1 else ""
            clean_text = f"**{first_line}**\n\n{remaining_lines}"

        # Markdown uchun matnni tozalash
        clean_text = clean_markdown(clean_text)

        # Matnni qisqartirish
        clean_text = truncate_text(clean_text, limit=1000)

        # Final post uchun tahrirlar (Markdown formatida link qo'shish)
        if target == "betrader":
            clean_text += '\n\n<a href="https://t.me/betrader_uz">Be Trader ‚Äì –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤</a>'
        elif target == "betrader_uz":
            clean_text += '\n\n<a href="https://t.me/Betrader_uz">Betrader_uz ‚Äì –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤</a>'
        else:
            clean_text += '\n\n<a href="https://t.me/firdavsurinov">SMM: Firdavs Urinov</a>'

        print(f"Final text before sending to Telegram: {clean_text}")

        context.user_data["final_text"] = clean_text

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(MESSAGES[lang]["confirm_button"], callback_data="confirm_post")],
            [InlineKeyboardButton(MESSAGES[lang]["rewrite_button"], callback_data="rewrite_post"),
             InlineKeyboardButton(MESSAGES[lang]["shorten_button"], callback_data="shorten_post")]
        ])

        if media_group:
            media = []
            for item in media_group:
                if item["photo"]:
                    media.append(InputMediaPhoto(media=item["photo"], caption=clean_text if not media else "", parse_mode="HTML"))
                elif item["video"]:
                    media.append(InputMediaVideo(media=item["video"], caption=clean_text if not media else "", parse_mode="HTML"))
            await query.message.reply_media_group(media=media)
            await query.message.reply_text("Postni tasdiqlang:" if lang == "uz" else "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—Å—Ç:", reply_markup=keyboard)
        elif photo:
            await query.message.reply_photo(photo=photo, caption=clean_text, parse_mode="HTML", reply_markup=keyboard)
        elif video:
            await query.message.reply_video(video=video, caption=clean_text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await query.message.reply_text(clean_text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        if "Message caption is too long" in str(e):
            await query.message.reply_text(MESSAGES[lang]["too_long_error"])
            context.user_data["shorten"] = True
            await process_text(update, context, shorten=True)
        else:
            await query.message.reply_text(MESSAGES[lang]["gpt_error"].format(error=e))

async def handle_rewrite_or_shorten(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    shorten = action == "shorten_post"
    await process_text(update, context, shorten=shorten)

    try:
        if media_group:
            media = []
            for item in media_group:
                if item["photo"]:
                    media.append(InputMediaPhoto(media=item["photo"], caption=final_text if not media else "", parse_mode="HTML"))
                elif item["video"]:
                    media.append(InputMediaVideo(media=item["video"], caption=final_text if not media else "", parse_mode="HTML"))
            await context.bot.send_media_group(chat_id=channel_id, media=media)
        elif photo:
            await context.bot.send_photo(chat_id=channel_id, photo=photo, caption=final_text, parse_mode="HTML")
        elif video:
            await context.bot.send_video(chat_id=channel_id, video=video, caption=final_text, parse_mode="HTML")
        else:
            await context.bot.send_message(chat_id=channel_id, text=final_text, parse_mode="HTML")

        await query.message.reply_text(MESSAGES[lang]["posted"])
    except Exception as e:
        await query.message.reply_text(MESSAGES[lang]["post_error"].format(error=e))

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT | filters.CAPTION | filters.PHOTO | filters.VIDEO, handle_all_messages))
    app.add_handler(CallbackQueryHandler(handle_target_choice, pattern="^target_"))
    app.add_handler(CallbackQueryHandler(handle_language_choice, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(handle_rewrite_or_shorten, pattern="^(rewrite_post|shorten_post)$"))
    app.add_handler(CallbackQueryHandler(handle_confirm_post, pattern="^confirm_post$"))
    print("Bot ishga tushdi...")
    app.run_polling()